@typeparam T

<CustomTypeahead SearchMethod="@((string value) => SearchMethod(value))"
                 Value="@sampleItem"
                 ValueChanged="@((T item) => ElementoSeleccionado(item))">
    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
</CustomTypeahead>
@*Elementos sin orden significa el UL*@
<ul class="list-group">
    @foreach (var item in ElementosSeleccionados)
    {
        <li draggable="true"
            @ondragstart="@(() => HandleDragStart(item))"
            @ondragover="@(() => HandleDragOver(item))"
            class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span @onclick="@(() => ElementosSeleccionados.Remove(item))"
                  class="badge badge-primary badge-pill"
                  style="cursor: pointer">X</span>
        </li>
    }
</ul>

@code {
    [Parameter] public List<T> ElementosSeleccionados { get; set; } = new List<T>();
    [Parameter] public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; }
    [Parameter] public RenderFragment<T> MyResultTemplate { get; set; }
    [Parameter] public RenderFragment<T> MyListTemplate { get; set; }
    T sampleItem = default(T);
    T itemArrastrado;// T es un elemento de la lista 

    private void HandleDragStart(T item)
    {
        itemArrastrado = item;
    }
    //cuando le pasamos por encima otro elemento
    private void HandleDragOver(T item)
    {
        if (!item.Equals(itemArrastrado))
        {
            //reoordenar
            var indiceElementoArrastrado = ElementosSeleccionados.IndexOf(itemArrastrado);
            var indiceElemento = ElementosSeleccionados.IndexOf(item);
            ElementosSeleccionados[indiceElemento] = itemArrastrado;
            ElementosSeleccionados[indiceElementoArrastrado] = item;
        }
    }

    private void ElementoSeleccionado(T item)
    {
        if (!ElementosSeleccionados.Any(x => x.Equals(item)))
        {
            ElementosSeleccionados.Add(item);
        }
        sampleItem = default(T);
    }
} 